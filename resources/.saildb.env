# Testing handmade DotEnv parser
test = 'hi'
value="hello, world!"
otherValue  =  1,2, 3 # with variable whitespace delimiting the assignment token
someIntValue = 1
someDoubleValue = "    1.0125 "

# comment to ignore
someLiteralValue = 'some \'literal\' value'
someUnquotedValue = {"test": "value"}
someEscapedQuotedValue = "{\"test\": \"value\"}"
someGraveValueWithQuotes = `{"test": "value"}`

# comments = work
multilineValue   =     "<multiline>
hello, world!
with some {\"json\": \"values\"}
" # some comment at the end of a multiline

specialCharacters = ?, - = ! [] / {} \" $
valueWithComment =   this has [] {} $ chars# some comment undelimited by whitespace
stringWithComment  = "# not a comment"# 한this is a #comment to ignoreह
valueWithMultiComment =   this has [] {} $ chars # some #comment with more ### comment tags ###

valueWithEscapeSeq = no \t unescaping \n here
stringWithEscapeSeq = "we are... \nmultiline with \ttabs!"
someUnescapedLiteralValue = '${value}\n & no unescaping \t here!' # no interpolation or processing of escape sequences
backtickAllowEscapeAndInterp = `i can use quotes " and ', and I can use escape sequences\t-\tlook, tabs!`

someShortInterp = $value b
  someInterpValue=${value} # with variable whitespace on line start
  someInterpString="${value}"
    someInterpUnicodeValue   =    "θ Test#ing ế ${otherValue}"
  notAnInterpolatedValue = \$hello
  notAnInterpolatedString = "\${hello}"

valueWithMixedInterpValues="${value}\t$otherValue with ह utf-8 encoding θ"

valueWithDefaultUnset = "${value:-hello}"
valueWithDefaultEmpty = "${value-hello}"

someMultilineInterpValue   =   "
Testing ${test} across
lines, including brace-enclosed ${otherValue}
"
